buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'org.yaml', name: 'snakeyaml', version: '1.18'
  }
}

import org.yaml.snakeyaml.Yaml

// create tasks for subprojects
subprojects { subproject ->
  // get right configuration for the subproject
  def config = rootProject.ext.configMap["$subproject.name"]

  ///////////////////////////////////////////////////////////////////////////

  task createProcrustesPalates {

    description = "Creates Procrustes aligned versions of all palates."

    def dataset = config.dataset

    def originIndex = config.procrustesPalate.originIndex
    def iter = config.procrustesPalate.iter
    def counter = config.bootstrapPalate.counter

    dataset.speakers.each{ speaker ->

      def speakerSettings = rootProject.ext.configMap["$dataset.name-$speaker"].speaker
      def palateScan = speakerSettings.palateScan

      dependsOn ":projects:bootstrapPalate:subtasks:$counter-$dataset.name-$speaker-$palateScan:matchPalate"

      inputs.file "$rootProject.buildDir/$dataset.name/bootstrapPalate/$counter/$speaker/$palateScan/matchPalate/tracking_org_result0.ply"
      outputs.file "$rootProject.buildDir/$dataset.name/bootstrapPalate/$counter/$speaker/$palateScan/procrustesPalate/procrustes.ply"
    }

    doLast{

      outputs.files.each{ it.parentFile.mkdirs() }
      def inputString = inputs.files.join(' ')
      def outputString = outputs.files.join(' ')

      def cmd = "procrustes-alignment --input $inputString --output $outputString --noScaling --iter $iter --originIndex $originIndex --mapping ZXY --yFactor -1 --zFactor -1"

      exec{
        commandLine cmd.tokenize()
        workingDir rootProject.buildDir
      }
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////

  task createPalateTrainingFile {

    description = "Creates palate training file."

    def counter = config.bootstrapPalate.counter
    def dataset = config.dataset

    def databaseFile = file("$rootProject.rootDir/configuration/$dataset.name/palateDatabase.json")
    def trainingFile = file("$rootProject.buildDir/$dataset.name/bootstrapPalate/$counter/training/palate_training.yaml")

    inputs.file databaseFile
    outputs.file trainingFile

    doLast{

      trainingFile.parentFile.mkdirs()

      def slurper = new groovy.json.JsonSlurper()

      def database = slurper.parse(databaseFile)

      def speakers = database.collect{it.speaker}.unique().sort()

      def phonemes = database.collect{it.prompt}.unique()


      def trainingList = []

      speakers.each{ speakerName ->

        def speakerMap = [:]
        speakerMap["name"] = speakerName
        def myPhonemes = database.findAll{it.speaker == speakerName}.sort{it.prompt}
        def speakerPhonemes = []
        myPhonemes.each{ phoneme ->

          def entry = [:]
          entry["prompt"] = phoneme.prompt
          entry["path"] = new String("$rootProject.buildDir/$dataset.name/bootstrapPalate/$counter/$phoneme.speaker/$phoneme.id/procrustesPalate/procrustes.ply")

          speakerPhonemes.add(entry)

        }

        speakerMap["phonemes"] = speakerPhonemes

        trainingList.add(speakerMap)


      }

      def meta = [:]
      meta["speakerAmount"] = speakers.size()
      meta["phonemeAmount"] = phonemes.size()

      def root = [:]
      root["meta"] = meta
      root["data"] = trainingList

      def yaml = new Yaml()

      trainingFile.withWriter{ writer ->
        writer << yaml.dump(root)
      }
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////

  task createPalateModel {

    description = "Creates palate model."

    def counter = config.bootstrapPalate.counter
    def dataset = config.dataset

    dependsOn createPalateTrainingFile
    dependsOn createProcrustesPalates

    def trainingFile = file("$rootProject.buildDir/$dataset.name/bootstrapPalate/$counter/training/palate_training.yaml")
    def modelFile = file("$rootProject.buildDir/$dataset.name/bootstrapPalate/$counter/model/palate_model.yaml")

    inputs.file trainingFile
    outputs.file modelFile

    doLast{

      modelFile.parentFile.mkdirs()

      def command = "model-builder --samples $trainingFile --output $modelFile"

      exec{
        commandLine command.tokenize()
        workingDir rootProject.buildDir
      }
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////

}
